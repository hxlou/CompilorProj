#ifndef TreeNodeDefine
#define TreeNodeDefine(x)
#endif

#ifndef OpcodeDefine
#define OpcodeDefine(x, s)
#endif

TreeNodeDefine(ND_UnaryExpr)
TreeNodeDefine(ND_BinaryExpr)
TreeNodeDefine(ND_IntegerLiteral)
TreeNodeDefine(ND_Type)
TreeNodeDefine(ND_Ident)
TreeNodeDefine(ND_CompUnit)
TreeNodeDefine(ND_If)
TreeNodeDefine(ND_While)
TreeNodeDefine(ND_Break)
TreeNodeDefine(ND_Continue)
TreeNodeDefine(ND_Block)
TreeNodeDefine(ND_BlockItem)
TreeNodeDefine(ND_InitVal)
TreeNodeDefine(ND_VarDecl)
TreeNodeDefine(ND_VarDef)
TreeNodeDefine(ND_FuncDef)
TreeNodeDefine(ND_FuncParams)
TreeNodeDefine(ND_FuncParam)
TreeNodeDefine(ND_LVal)
TreeNodeDefine(ND_PrimaryExp)
TreeNodeDefine(ND_FuncRParams)
TreeNodeDefine(ND_LvalEqStmt)
TreeNodeDefine(ND_Return)

// Binary Opcode    []shuang mu yun suan fu
OpcodeDefine(OP_Add,    "add")      // add
OpcodeDefine(OP_Sub,    "sub")      // 
OpcodeDefine(OP_Mul,    "mul")
OpcodeDefine(OP_Div,    "div")
OpcodeDefine(OP_Mod,    "mod")
OpcodeDefine(OP_Lt,     "lt")       // < 
OpcodeDefine(OP_Gt,     "gt")       // >
OpcodeDefine(OP_Le,     "le")       // <=
OpcodeDefine(OP_Ge,     "ge")       // >=
OpcodeDefine(OP_Eq,     "eq")       // ==
OpcodeDefine(OP_Ne,     "ne")       // !+
OpcodeDefine(OP_Land,   "and")      // &&
OpcodeDefine(OP_Lor,    "or")       // ||
OpcodeDefine(OP_Lxor,   "xor")      // ^
// Unary Opcode     []dan mu yun suan fu
OpcodeDefine(OP_Lnot,   "not")      // !
OpcodeDefine(OP_Neg,    "neg")      // - 
OpcodeDefine(OP_Pos,    "pos")      // +
OpcodeDefine(OP_Non,    "non")      // +
OpcodeDefine(OP_Func,    "FunctionCall")      // +

#undef TreeNodeDefine
#undef OpcodeDefine