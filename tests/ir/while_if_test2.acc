fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @ifWhile( ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %b
  let %2 = eq %1, 2
  br %2, label %While_1_BodyBB, label %While_1_ExitBB
%While_1_BodyBB:
  let %4 = load %b
  let %5 = add %4, 2
  let %6 = store %5, %b
  jmp label %While_1_EntryBB
%While_1_ExitBB:
  let %8 = load %b
  let %9 = add %8, 25
  let %10 = store %9, %b
  jmp label %IF_1_ExitBB
%IF_1_TrueBB:
  jmp label %While_1_EntryBB
%While_2_EntryBB:
  let %13 = load %a
  let %14 = lt %13, 5
  br %14, label %While_2_BodyBB, label %While_2_ExitBB
%While_2_BodyBB:
  let %16 = load %b
  let %17 = mul %16, 2
  let %18 = store %17, %b
  let %19 = load %a
  let %20 = add %19, 1
  let %21 = store %20, %a
  jmp label %While_2_EntryBB
%While_2_ExitBB:
  jmp label %IF_1_ExitBB
%IF_1_FalseBB:
  jmp label %While_2_EntryBB
%IF_1_ExitBB:
  let %25 = load %b
  let %26 = store %25, %ret
  jmp label %FuncRet
%FuncBody:
  let %28 = store 0, %a
  let %29 = store 3, %b
  let %30 = load %a
  let %31 = eq %30, 5
  br %31, label %IF_1_TrueBB, label %IF_1_FalseBB
%FuncRet:
  let %33 = load %ret
  ret %33
}
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  jmp label %FuncBody
%FuncBody:
  let %1 = call @ifWhile
  let %2 = call @putint, %1
  let %3 = store 0, %ret
  jmp label %FuncRet
%FuncRet:
  let %5 = load %ret
  ret %5
}
