fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @if_ifElse_( ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  jmp label %FuncBody
%IF_2_TrueBB:
  let %1 = store 25, %a
  jmp label %IF_2_ExitBB
%IF_2_FalseBB:
  let %3 = load %a
  let %4 = add %3, 15
  let %5 = store %4, %a
  jmp label %IF_2_ExitBB
%IF_2_ExitBB:
  jmp label %IF_1_ExitBB
%IF_1_TrueBB:
  let %8 = load %b
  let %9 = eq %8, 10
  br %9, label %IF_2_TrueBB, label %IF_2_FalseBB
%IF_1_ExitBB:
  let %11 = load %a
  let %12 = store %11, %ret
  jmp label %FuncRet
%FuncBody:
  let %14 = store 5, %a
  let %15 = store 10, %b
  let %16 = load %a
  let %17 = eq %16, 5
  br %17, label %IF_1_TrueBB, label %IF_1_ExitBB
%FuncRet:
  let %19 = load %ret
  ret %19
}
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  jmp label %FuncBody
%FuncBody:
  let %1 = call @if_ifElse_
  let %2 = call @putint, %1
  let %3 = store 0, %ret
  jmp label %FuncRet
%FuncRet:
  let %5 = load %ret
  ret %5
}
