@a : region i32, 81
fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @check_sudoku(#0: i32* ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  let %k = alloca i32, 1
  let %b = alloca i32, 9
  let %l = alloca i32, 1
  let %m = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %2 = load %i
  let %3 = lt %2, 9
  br %3, label %While_1_BodyBB, label %While_1_ExitBB
%While_2_EntryBB:
  let %5 = load %j
  let %6 = lt %5, 9
  br %6, label %While_2_BodyBB, label %While_2_ExitBB
%While_2_BodyBB:
  let %8 = load %j
  let %9 = offset i32, %b, [%8, 9]
  let %10 = store 0, %9
  let %11 = load %j
  let %12 = add %11, 1
  let %13 = store %12, %j
  jmp label %While_2_EntryBB
%While_3_EntryBB:
  let %15 = load %j
  let %16 = lt %15, 9
  br %16, label %While_3_BodyBB, label %While_3_ExitBB
%IF_2_TrueBB:
  let %18 = load %i
  let %19 = load %j
  let %20 = offset i32, #0, [%18, none], [%19, 9]
  let %21 = load %20
  let %22 = sub %21, 1
  let %23 = offset i32, %b, [%22, 9]
  let %24 = store 1, %23
  jmp label %IF_2_ExitBB
%IF_2_FalseBB:
  let %26 = store 0, %ret
  jmp label %IF_2_ExitBB
%IF_2_ExitBB:
  jmp label %IF_1_ExitBB
%IF_1_TrueBB:
  let %29 = load %i
  let %30 = load %j
  let %31 = offset i32, #0, [%29, none], [%30, 9]
  let %32 = load %31
  let %33 = sub %32, 1
  let %34 = offset i32, %b, [%33, 9]
  let %35 = load %34
  let %36 = eq %35, 0
  br %36, label %IF_2_TrueBB, label %IF_2_FalseBB
%IF_1_ExitBB:
  let %38 = load %j
  let %39 = add %38, 1
  let %40 = store %39, %j
  jmp label %While_3_EntryBB
%While_3_BodyBB:
  let %42 = load %i
  let %43 = load %j
  let %44 = offset i32, #0, [%42, none], [%43, 9]
  let %45 = load %44
  br %45, label %IF_1_TrueBB, label %IF_1_ExitBB
%While_3_ExitBB:
  let %47 = load %i
  let %48 = add %47, 1
  let %49 = store %48, %i
  jmp label %While_1_EntryBB
%While_2_ExitBB:
  let %51 = store 0, %j
  jmp label %While_3_EntryBB
%While_1_BodyBB:
  let %53 = store 0, %j
  jmp label %While_2_EntryBB
%While_4_EntryBB:
  let %55 = load %i
  let %56 = lt %55, 9
  br %56, label %While_4_BodyBB, label %While_4_ExitBB
%While_5_EntryBB:
  let %58 = load %j
  let %59 = lt %58, 9
  br %59, label %While_5_BodyBB, label %While_5_ExitBB
%While_5_BodyBB:
  let %61 = load %j
  let %62 = offset i32, %b, [%61, 9]
  let %63 = store 0, %62
  let %64 = load %j
  let %65 = add %64, 1
  let %66 = store %65, %j
  jmp label %While_5_EntryBB
%While_6_EntryBB:
  let %68 = load %j
  let %69 = lt %68, 9
  br %69, label %While_6_BodyBB, label %While_6_ExitBB
%IF_4_TrueBB:
  let %71 = load %j
  let %72 = load %i
  let %73 = offset i32, #0, [%71, none], [%72, 9]
  let %74 = load %73
  let %75 = sub %74, 1
  let %76 = offset i32, %b, [%75, 9]
  let %77 = store 1, %76
  jmp label %IF_4_ExitBB
%IF_4_FalseBB:
  let %79 = store 0, %ret
  jmp label %IF_4_ExitBB
%IF_4_ExitBB:
  jmp label %IF_3_ExitBB
%IF_3_TrueBB:
  let %82 = load %j
  let %83 = load %i
  let %84 = offset i32, #0, [%82, none], [%83, 9]
  let %85 = load %84
  let %86 = sub %85, 1
  let %87 = offset i32, %b, [%86, 9]
  let %88 = load %87
  let %89 = eq %88, 0
  br %89, label %IF_4_TrueBB, label %IF_4_FalseBB
%IF_3_ExitBB:
  let %91 = load %j
  let %92 = add %91, 1
  let %93 = store %92, %j
  jmp label %While_6_EntryBB
%While_6_BodyBB:
  let %95 = load %j
  let %96 = load %i
  let %97 = offset i32, #0, [%95, none], [%96, 9]
  let %98 = load %97
  br %98, label %IF_3_TrueBB, label %IF_3_ExitBB
%While_6_ExitBB:
  let %100 = load %i
  let %101 = add %100, 1
  let %102 = store %101, %i
  jmp label %While_4_EntryBB
%While_5_ExitBB:
  let %104 = store 0, %j
  jmp label %While_6_EntryBB
%While_4_BodyBB:
  let %106 = store 0, %j
  jmp label %While_5_EntryBB
%While_7_EntryBB:
  let %108 = load %i
  let %109 = lt %108, 3
  br %109, label %While_7_BodyBB, label %While_7_ExitBB
%While_8_EntryBB:
  let %111 = load %j
  let %112 = lt %111, 3
  br %112, label %While_8_BodyBB, label %While_8_ExitBB
%While_9_EntryBB:
  let %114 = load %k
  let %115 = lt %114, 9
  br %115, label %While_9_BodyBB, label %While_9_ExitBB
%While_9_BodyBB:
  let %117 = load %k
  let %118 = offset i32, %b, [%117, 9]
  let %119 = store 0, %118
  let %120 = load %k
  let %121 = add %120, 1
  let %122 = store %121, %k
  jmp label %While_9_EntryBB
%While_10_EntryBB:
  let %124 = load %k
  let %125 = lt %124, 3
  br %125, label %While_10_BodyBB, label %While_10_ExitBB
%While_11_EntryBB:
  let %127 = load %l
  let %128 = lt %127, 3
  br %128, label %While_11_BodyBB, label %While_11_ExitBB
%IF_6_TrueBB:
  let %130 = load %m
  let %131 = sub %130, 1
  let %132 = offset i32, %b, [%131, 9]
  let %133 = store 1, %132
  jmp label %IF_6_ExitBB
%IF_6_FalseBB:
  let %135 = store 0, %ret
  jmp label %IF_6_ExitBB
%IF_6_ExitBB:
  jmp label %IF_5_ExitBB
%IF_5_TrueBB:
  let %138 = load %m
  let %139 = sub %138, 1
  let %140 = offset i32, %b, [%139, 9]
  let %141 = load %140
  let %142 = eq %141, 0
  br %142, label %IF_6_TrueBB, label %IF_6_FalseBB
%IF_5_ExitBB:
  let %144 = load %l
  let %145 = add %144, 1
  let %146 = store %145, %l
  jmp label %While_11_EntryBB
%While_11_BodyBB:
  let %148 = load %i
  let %149 = mul %148, 3
  let %150 = load %k
  let %151 = add %149, %150
  let %152 = load %j
  let %153 = mul %152, 3
  let %154 = load %l
  let %155 = add %153, %154
  let %156 = offset i32, #0, [%151, none], [%155, 9]
  let %157 = load %156
  let %158 = store %157, %m
  let %159 = load %m
  br %159, label %IF_5_TrueBB, label %IF_5_ExitBB
%While_11_ExitBB:
  let %161 = load %k
  let %162 = add %161, 1
  let %163 = store %162, %k
  jmp label %While_10_EntryBB
%While_10_BodyBB:
  let %165 = store 0, %l
  jmp label %While_11_EntryBB
%While_10_ExitBB:
  let %167 = load %j
  let %168 = add %167, 1
  let %169 = store %168, %j
  jmp label %While_8_EntryBB
%While_9_ExitBB:
  let %171 = store 0, %k
  jmp label %While_10_EntryBB
%While_8_BodyBB:
  let %173 = store 0, %k
  jmp label %While_9_EntryBB
%While_8_ExitBB:
  let %175 = load %i
  let %176 = add %175, 1
  let %177 = store %176, %i
  jmp label %While_7_EntryBB
%While_7_BodyBB:
  let %179 = store 0, %j
  jmp label %While_8_EntryBB
%While_7_ExitBB:
  let %181 = store 1, %ret
  jmp label %FuncRet
%While_4_ExitBB:
  let %183 = store 0, %i
  jmp label %While_7_EntryBB
%While_1_ExitBB:
  let %185 = store 0, %i
  jmp label %While_4_EntryBB
%FuncBody:
  let %187 = store 0, %i
  jmp label %While_1_EntryBB
%FuncRet:
  let %189 = load %ret
  ret %189
}
fn @solve_sudoku( ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  let %solve_i = alloca i32, 1
  let %solve_j = alloca i32, 1
  let %done = alloca i32, 1
  jmp label %FuncBody
%While_12_EntryBB:
  let %1 = load %i
  let %2 = lt %1, 9
  let %3 = load %done
  let %4 = and %2, %3
  br %4, label %While_12_BodyBB, label %While_12_ExitBB
%While_13_EntryBB:
  let %6 = load %j
  let %7 = lt %6, 9
  let %8 = load %done
  let %9 = and %7, %8
  br %9, label %While_13_BodyBB, label %While_13_ExitBB
%IF_7_TrueBB:
  let %11 = store 0, %done
  let %12 = load %i
  let %13 = store %12, %solve_i
  let %14 = load %j
  let %15 = store %14, %solve_j
  jmp label %IF_7_ExitBB
%IF_7_ExitBB:
  let %17 = load %j
  let %18 = add %17, 1
  let %19 = store %18, %j
  jmp label %While_13_EntryBB
%While_13_BodyBB:
  let %21 = load %i
  let %22 = load %j
  let %23 = offset i32, @a, [%21, 9], [%22, 9]
  let %24 = load %23
  let %25 = eq %24, 0
  br %25, label %IF_7_TrueBB, label %IF_7_ExitBB
%While_13_ExitBB:
  let %27 = load %i
  let %28 = add %27, 1
  let %29 = store %28, %i
  jmp label %While_12_EntryBB
%While_12_BodyBB:
  let %31 = store 0, %j
  jmp label %While_13_EntryBB
%IF_8_TrueBB:
  let %33 = load @a
  let %34 = call @check_sudoku, %33
  let %35 = store %34, %ret
  jmp label %IF_8_ExitBB
%While_14_EntryBB:
  let %37 = load %i
  let %38 = le %37, 9
  br %38, label %While_14_BodyBB, label %While_14_ExitBB
%IF_10_TrueBB:
  let %40 = store 1, %ret
  jmp label %IF_10_ExitBB
%IF_10_ExitBB:
  jmp label %IF_9_ExitBB
%IF_9_TrueBB:
  let %43 = call @solve_sudoku
  br %43, label %IF_10_TrueBB, label %IF_10_ExitBB
%IF_9_ExitBB:
  let %45 = load %i
  let %46 = add %45, 1
  let %47 = store %46, %i
  jmp label %While_14_EntryBB
%While_14_BodyBB:
  let %49 = load %i
  let %50 = load %solve_i
  let %51 = load %solve_j
  let %52 = offset i32, @a, [%50, 9], [%51, 9]
  let %53 = store %49, %52
  let %54 = load @a
  let %55 = call @check_sudoku, %54
  br %55, label %IF_9_TrueBB, label %IF_9_ExitBB
%While_14_ExitBB:
  let %57 = load %solve_i
  let %58 = load %solve_j
  let %59 = offset i32, @a, [%57, 9], [%58, 9]
  let %60 = store 0, %59
  let %61 = store 0, %ret
  jmp label %FuncRet
%IF_8_ExitBB:
  let %63 = store 1, %i
  jmp label %While_14_EntryBB
%While_12_ExitBB:
  let %65 = load %done
  br %65, label %IF_8_TrueBB, label %IF_8_ExitBB
%FuncBody:
  let %67 = store 1, %done
  let %68 = store 0, %i
  jmp label %While_12_EntryBB
%FuncRet:
  let %70 = load %ret
  ret %70
}
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  let %solve = alloca i32, 1
  jmp label %FuncBody
%While_15_EntryBB:
  let %1 = load %i
  let %2 = lt %1, 9
  br %2, label %While_15_BodyBB, label %While_15_ExitBB
%While_16_EntryBB:
  let %4 = load %j
  let %5 = lt %4, 9
  br %5, label %While_16_BodyBB, label %While_16_ExitBB
%IF_11_TrueBB:
  let %7 = call @putint, 0
  let %8 = call @putch, 32
  let %9 = store 0, %ret
  jmp label %IF_11_ExitBB
%IF_12_TrueBB:
  let %11 = store 1, %solve
  jmp label %IF_12_ExitBB
%IF_12_ExitBB:
  jmp label %IF_11_ExitBB
%IF_11_FalseBB:
  let %14 = load %i
  let %15 = load %j
  let %16 = offset i32, @a, [%14, 9], [%15, 9]
  let %17 = load %16
  let %18 = eq %17, 0
  br %18, label %IF_12_TrueBB, label %IF_12_ExitBB
%IF_11_ExitBB:
  let %20 = load %j
  let %21 = add %20, 1
  let %22 = store %21, %j
  jmp label %While_16_EntryBB
%While_16_BodyBB:
  let %24 = call @getint
  let %25 = load %i
  let %26 = load %j
  let %27 = offset i32, @a, [%25, 9], [%26, 9]
  let %28 = store %24, %27
  let %29 = load %i
  let %30 = load %j
  let %31 = offset i32, @a, [%29, 9], [%30, 9]
  let %32 = load %31
  let %33 = lt %32, 0
  let %34 = load %i
  let %35 = load %j
  let %36 = offset i32, @a, [%34, 9], [%35, 9]
  let %37 = load %36
  let %38 = gt %37, 9
  let %39 = or %33, %38
  br %39, label %IF_11_TrueBB, label %IF_11_FalseBB
%While_16_ExitBB:
  let %41 = load %i
  let %42 = add %41, 1
  let %43 = store %42, %i
  jmp label %While_15_EntryBB
%While_15_BodyBB:
  let %45 = store 0, %j
  jmp label %While_16_EntryBB
%While_17_EntryBB:
  let %47 = load %i
  let %48 = lt %47, 9
  br %48, label %While_17_BodyBB, label %While_17_ExitBB
%While_18_EntryBB:
  let %50 = load %j
  let %51 = lt %50, 9
  br %51, label %While_18_BodyBB, label %While_18_ExitBB
%While_18_BodyBB:
  let %53 = load %i
  let %54 = load %j
  let %55 = offset i32, @a, [%53, 9], [%54, 9]
  let %56 = load %55
  let %57 = call @putint, %56
  let %58 = call @putch, 32
  let %59 = load %j
  let %60 = add %59, 1
  let %61 = store %60, %j
  jmp label %While_18_EntryBB
%While_18_ExitBB:
  let %63 = load %i
  let %64 = add %63, 1
  let %65 = store %64, %i
  jmp label %While_17_EntryBB
%While_17_BodyBB:
  let %67 = store 0, %j
  jmp label %While_18_EntryBB
%While_17_ExitBB:
  jmp label %IF_14_ExitBB
%IF_14_TrueBB:
  let %70 = store 0, %i
  jmp label %While_17_EntryBB
%IF_14_FalseBB:
  let %72 = call @putint, 0
  let %73 = call @putch, 32
  jmp label %IF_14_ExitBB
%IF_14_ExitBB:
  jmp label %IF_13_ExitBB
%IF_13_TrueBB:
  let %76 = call @solve_sudoku
  br %76, label %IF_14_TrueBB, label %IF_14_FalseBB
%IF_15_TrueBB:
  let %78 = call @putint, 1
  let %79 = call @putch, 32
  jmp label %IF_15_ExitBB
%IF_15_FalseBB:
  let %81 = call @putint, 0
  let %82 = call @putch, 32
  jmp label %IF_15_ExitBB
%IF_15_ExitBB:
  jmp label %IF_13_ExitBB
%IF_13_FalseBB:
  let %85 = load @a
  let %86 = call @check_sudoku, %85
  br %86, label %IF_15_TrueBB, label %IF_15_FalseBB
%IF_13_ExitBB:
  let %88 = store 0, %ret
  jmp label %FuncRet
%While_15_ExitBB:
  let %90 = load %solve
  br %90, label %IF_13_TrueBB, label %IF_13_FalseBB
%FuncBody:
  let %92 = store 0, %i
  let %93 = store 0, %j
  let %94 = store 0, %solve
  jmp label %While_15_EntryBB
%FuncRet:
  let %96 = load %ret
  ret %96
}
