fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %b = alloca i32, 3
  let %c = alloca i32, 10
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  let %t = alloca i32, 1
  let %a = alloca i32, 5
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %i
  let %2 = lt %1, 5
  br %2, label %While_1_BodyBB, label %While_1_ExitBB
%While_1_BodyBB:
  let %4 = call @getint
  let %5 = load %i
  let %6 = offset i32, %a, [%5, 5]
  let %7 = store %4, %6
  let %8 = load %i
  let %9 = add %8, 1
  let %10 = store %9, %i
  jmp label %While_1_EntryBB
%While_2_EntryBB:
  let %12 = load %i
  let %13 = lt %12, 4
  br %13, label %While_2_BodyBB, label %While_2_ExitBB
%While_3_EntryBB:
  let %15 = load %j
  let %16 = lt %15, 5
  br %16, label %While_3_BodyBB, label %While_3_ExitBB
%IF_1_TrueBB:
  let %18 = load %i
  let %19 = offset i32, %a, [%18, 5]
  let %20 = load %19
  let %21 = store %20, %t
  let %22 = load %j
  let %23 = offset i32, %a, [%22, 5]
  let %24 = load %23
  let %25 = load %i
  let %26 = offset i32, %a, [%25, 5]
  let %27 = store %24, %26
  let %28 = load %t
  let %29 = load %j
  let %30 = offset i32, %a, [%29, 5]
  let %31 = store %28, %30
  jmp label %IF_1_ExitBB
%IF_1_ExitBB:
  let %33 = load %j
  let %34 = add %33, 1
  let %35 = store %34, %j
  jmp label %While_3_EntryBB
%While_3_BodyBB:
  let %37 = load %i
  let %38 = offset i32, %a, [%37, 5]
  let %39 = load %38
  let %40 = load %j
  let %41 = offset i32, %a, [%40, 5]
  let %42 = load %41
  let %43 = gt %39, %42
  br %43, label %IF_1_TrueBB, label %IF_1_ExitBB
%While_3_ExitBB:
  let %45 = load %i
  let %46 = add %45, 1
  let %47 = store %46, %i
  jmp label %While_2_EntryBB
%While_2_BodyBB:
  let %49 = load %i
  let %50 = add %49, 1
  let %51 = store %50, %j
  jmp label %While_3_EntryBB
%While_4_EntryBB:
  let %53 = load %i
  let %54 = lt %53, 5
  br %54, label %While_4_BodyBB, label %While_4_ExitBB
%While_4_BodyBB:
  let %56 = load %i
  let %57 = offset i32, %a, [%56, 5]
  let %58 = load %57
  let %59 = call @putint, %58
  let %60 = call @putch, 32
  let %61 = load %i
  let %62 = add %61, 1
  let %63 = store %62, %i
  jmp label %While_4_EntryBB
%While_4_ExitBB:
  let %65 = store 0, %ret
  jmp label %FuncRet
%While_2_ExitBB:
  let %67 = store 0, %i
  jmp label %While_4_EntryBB
%While_1_ExitBB:
  let %69 = store 0, %i
  jmp label %While_2_EntryBB
%FuncBody:
  let %71 = store 0, %i
  jmp label %While_1_EntryBB
%FuncRet:
  let %73 = load %ret
  ret %73
}
