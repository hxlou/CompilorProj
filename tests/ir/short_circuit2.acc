fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @add(#0: i32* ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  jmp label %FuncBody
%FuncBody:
  let %2 = offset i32, #0, [0, none]
  let %3 = load %2
  let %4 = add %3, 1
  let %5 = offset i32, #0, [0, none]
  let %6 = store %4, %5
  let %7 = store 1, %ret
  jmp label %FuncRet
%FuncRet:
  let %9 = load %ret
  ret %9
}
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %a = alloca i32, 1
  let %array = alloca i32, 10
  jmp label %FuncBody
%IF_1_TrueBB:
  let %1 = offset i32, %array, [0, 10]
  let %2 = load %1
  let %3 = call @putint, %2
  jmp label %IF_1_ExitBB
%IF_1_FalseBB:
  let %5 = offset i32, %array, [0, 10]
  let %6 = load %5
  let %7 = call @putint, %6
  jmp label %IF_1_ExitBB
%IF_1_ExitBB:
  let %9 = store 0, %ret
  jmp label %FuncRet
%FuncBody:
  let %11 = store 10, %a
  let %12 = offset i32, %array, [0, 10]
  let %13 = store 10, %12
  let %14 = load %a
  let %15 = eq %14, 10
  let %16 = load %array
  let %17 = call @add, %16
  let %18 = or %15, %17
  br %18, label %IF_1_TrueBB, label %IF_1_FalseBB
%FuncRet:
  let %20 = load %ret
  ret %20
}
