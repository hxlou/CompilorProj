fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %mat = alloca i32, 16
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  let %k = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %i
  let %2 = lt %1, 4
  br %2, label %While_1_BodyBB, label %While_1_ExitBB
%While_2_EntryBB:
  let %4 = load %j
  let %5 = lt %4, 4
  br %5, label %While_2_BodyBB, label %While_2_ExitBB
%While_2_BodyBB:
  let %7 = load %i
  let %8 = load %j
  let %9 = offset i32, %mat, [%7, 4], [%8, 4]
  let %10 = store 999, %9
  let %11 = load %j
  let %12 = add %11, 1
  let %13 = store %12, %j
  jmp label %While_2_EntryBB
%While_2_ExitBB:
  let %15 = load %i
  let %16 = add %15, 1
  let %17 = store %16, %i
  jmp label %While_1_EntryBB
%While_1_BodyBB:
  let %19 = store 0, %j
  jmp label %While_2_EntryBB
%While_3_EntryBB:
  let %21 = load %i
  let %22 = lt %21, 4
  br %22, label %While_3_BodyBB, label %While_3_ExitBB
%While_3_BodyBB:
  let %24 = load %i
  let %25 = load %i
  let %26 = offset i32, %mat, [%24, 4], [%25, 4]
  let %27 = store 0, %26
  let %28 = load %i
  let %29 = add %28, 1
  let %30 = store %29, %i
  jmp label %While_3_EntryBB
%While_4_EntryBB:
  let %32 = load %k
  let %33 = lt %32, 4
  br %33, label %While_4_BodyBB, label %While_4_ExitBB
%While_5_EntryBB:
  let %35 = load %i
  let %36 = lt %35, 4
  br %36, label %While_5_BodyBB, label %While_5_ExitBB
%While_6_EntryBB:
  let %38 = load %j
  let %39 = lt %38, 4
  br %39, label %While_6_BodyBB, label %While_6_ExitBB
%IF_1_TrueBB:
  let %41 = load %i
  let %42 = load %k
  let %43 = offset i32, %mat, [%41, 4], [%42, 4]
  let %44 = load %43
  let %45 = load %k
  let %46 = load %j
  let %47 = offset i32, %mat, [%45, 4], [%46, 4]
  let %48 = load %47
  let %49 = add %44, %48
  let %50 = load %i
  let %51 = load %j
  let %52 = offset i32, %mat, [%50, 4], [%51, 4]
  let %53 = store %49, %52
  jmp label %IF_1_ExitBB
%IF_1_ExitBB:
  let %55 = load %j
  let %56 = add %55, 1
  let %57 = store %56, %j
  jmp label %While_6_EntryBB
%While_6_BodyBB:
  let %59 = load %i
  let %60 = load %k
  let %61 = offset i32, %mat, [%59, 4], [%60, 4]
  let %62 = load %61
  let %63 = load %k
  let %64 = load %j
  let %65 = offset i32, %mat, [%63, 4], [%64, 4]
  let %66 = load %65
  let %67 = add %62, %66
  let %68 = load %i
  let %69 = load %j
  let %70 = offset i32, %mat, [%68, 4], [%69, 4]
  let %71 = load %70
  let %72 = lt %67, %71
  br %72, label %IF_1_TrueBB, label %IF_1_ExitBB
%While_6_ExitBB:
  let %74 = load %i
  let %75 = add %74, 1
  let %76 = store %75, %i
  jmp label %While_5_EntryBB
%While_5_BodyBB:
  let %78 = store 0, %j
  jmp label %While_6_EntryBB
%While_5_ExitBB:
  let %80 = load %k
  let %81 = add %80, 1
  let %82 = store %81, %k
  jmp label %While_4_EntryBB
%While_4_BodyBB:
  let %84 = store 0, %i
  jmp label %While_5_EntryBB
%While_4_ExitBB:
  let %86 = offset i32, %mat, [0, 4], [3, 4]
  let %87 = load %86
  let %88 = call @putint, %87
  let %89 = call @putch, 32
  let %90 = offset i32, %mat, [1, 4], [2, 4]
  let %91 = load %90
  let %92 = call @putint, %91
  let %93 = call @putch, 32
  let %94 = offset i32, %mat, [2, 4], [1, 4]
  let %95 = load %94
  let %96 = call @putint, %95
  let %97 = call @putch, 32
  let %98 = offset i32, %mat, [3, 4], [0, 4]
  let %99 = load %98
  let %100 = call @putint, %99
  let %101 = store 0, %ret
  jmp label %FuncRet
%While_3_ExitBB:
  let %103 = offset i32, %mat, [0, 4], [1, 4]
  let %104 = store 3, %103
  let %105 = offset i32, %mat, [0, 4], [3, 4]
  let %106 = store 5, %105
  let %107 = offset i32, %mat, [1, 4], [0, 4]
  let %108 = store 2, %107
  let %109 = offset i32, %mat, [1, 4], [3, 4]
  let %110 = store 4, %109
  let %111 = offset i32, %mat, [2, 4], [1, 4]
  let %112 = store 1, %111
  let %113 = offset i32, %mat, [3, 4], [2, 4]
  let %114 = store 2, %113
  let %115 = store 0, %k
  jmp label %While_4_EntryBB
%While_1_ExitBB:
  let %117 = store 0, %i
  jmp label %While_3_EntryBB
%FuncBody:
  let %119 = store 0, %i
  jmp label %While_1_EntryBB
%FuncRet:
  let %121 = load %ret
  ret %121
}
