@a : region i32, 1
@b : region i32, 2
@c : region i32, 12
@i : region i32, 1
fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
  let %0 = store 2024, @i
%FuncEntry:
  let %ret = alloca i32, 1
  let %i = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %2 = load @a
  let %3 = lt %2, 2
  br %3, label %While_1_BodyBB, label %While_1_ExitBB
%While_1_BodyBB:
  let %5 = load @a
  let %6 = mul %5, 2
  let %7 = load @a
  let %8 = offset i32, @b, [%7, 2]
  let %9 = store %6, %8
  let %10 = load @a
  let %11 = add %10, 1
  let %12 = store %11, @a
  jmp label %While_1_EntryBB
%While_2_EntryBB:
  let %14 = load %i
  let %15 = lt %14, 12
  br %15, label %While_2_BodyBB, label %While_2_ExitBB
%While_2_BodyBB:
  let %17 = load %i
  let %18 = div %17, 3
  let %19 = load %i
  let %20 = rem %19, 3
  let %21 = offset i32, @c, [%18, 4], [%20, 3]
  let %22 = store 0, %21
  let %23 = load %i
  let %24 = add %23, 1
  let %25 = store %24, %i
  jmp label %While_2_EntryBB
%While_3_EntryBB:
  let %27 = load %i
  let %28 = lt %27, 12
  br %28, label %While_3_BodyBB, label %While_3_ExitBB
%While_3_BodyBB:
  let %30 = load %i
  let %31 = div %30, 3
  let %32 = load %i
  let %33 = rem %32, 3
  let %34 = offset i32, @c, [%31, 4], [%33, 3]
  let %35 = load %34
  let %36 = call @putint, %35
  let %37 = call @putch, 32
  let %38 = load %i
  let %39 = add %38, 1
  let %40 = store %39, %i
  jmp label %While_3_EntryBB
%While_3_ExitBB:
  let %42 = store 0, %ret
  jmp label %FuncRet
%While_2_ExitBB:
  let %44 = offset i32, @c, [0, 4], [0, 3]
  let %45 = store 1, %44
  let %46 = offset i32, @c, [0, 4], [1, 3]
  let %47 = store 1, %46
  let %48 = offset i32, @c, [0, 4], [2, 3]
  let %49 = store 4, %48
  let %50 = offset i32, @c, [1, 4], [0, 3]
  let %51 = store 5, %50
  let %52 = offset i32, @c, [2, 4], [0, 3]
  let %53 = store 1, %52
  let %54 = offset i32, @c, [3, 4], [0, 3]
  let %55 = store 4, %54
  let %56 = store 0, %i
  jmp label %While_3_EntryBB
%While_1_ExitBB:
  let %58 = load @a
  let %59 = offset i32, @b, [0, 2]
  let %60 = load %59
  let %61 = add %58, %60
  let %62 = offset i32, @b, [1, 2]
  let %63 = load %62
  let %64 = add %61, %63
  let %65 = call @putint, %64
  let %66 = call @putch, 32
  let %67 = load @i
  let %68 = call @putint, %67
  let %69 = call @putch, 32
  let %70 = store 0, %i
  jmp label %While_2_EntryBB
%FuncBody:
  jmp label %While_1_EntryBB
%FuncRet:
  let %73 = load %ret
  ret %73
}
