fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %a = alloca i32, 1
  jmp label %FuncBody
%IF_1_TrueBB:
  let %1 = sub 0, 1
  let %2 = sub 0, %1
  let %3 = sub 0, %2
  let %4 = store %3, %a
  jmp label %IF_1_ExitBB
%IF_1_FalseBB:
  let %6 = store 0, %a
  jmp label %IF_1_ExitBB
%IF_1_ExitBB:
  let %8 = load %a
  let %9 = call @putint, %8
  let %10 = store 0, %ret
  jmp label %FuncRet
%FuncBody:
  let %12 = store 10, %a
  let %13 = load %a
  let %14 = eq %13, 0
  let %15 = eq %14, 0
  br %15, label %IF_1_TrueBB, label %IF_1_FalseBB
%FuncRet:
  let %17 = load %ret
  ret %17
}
