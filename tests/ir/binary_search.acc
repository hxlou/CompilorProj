fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %num = alloca i32, 1
  let %arr = alloca i32, 10
  let %key = alloca i32, 1
  let %i = alloca i32, 1
  let %res = alloca i32, 1
  let %left = alloca i32, 1
  let %right = alloca i32, 1
  jmp label %FuncBody
%IF_1_TrueBB:
  let %1 = store 10, %num
  jmp label %IF_1_ExitBB
%While_1_EntryBB:
  let %3 = load %i
  let %4 = load %num
  let %5 = lt %3, %4
  br %5, label %While_1_BodyBB, label %While_1_ExitBB
%While_1_BodyBB:
  let %7 = call @getint
  let %8 = load %i
  let %9 = offset i32, %arr, [%8, 10]
  let %10 = store %7, %9
  let %11 = load %i
  let %12 = add %11, 1
  let %13 = store %12, %i
  jmp label %While_1_EntryBB
%While_2_EntryBB:
  let %15 = load %left
  let %16 = load %right
  let %17 = lt %15, %16
  br %17, label %While_2_BodyBB, label %While_2_ExitBB
%IF_2_TrueBB:
  let %19 = load %i
  let %20 = call @putint, %19
  let %21 = store 0, %ret
  jmp label %IF_2_ExitBB
%IF_3_TrueBB:
  let %23 = load %i
  let %24 = sub %23, 1
  let %25 = store %24, %right
  jmp label %IF_3_ExitBB
%IF_3_FalseBB:
  let %27 = load %i
  let %28 = add %27, 1
  let %29 = store %28, %left
  jmp label %IF_3_ExitBB
%IF_3_ExitBB:
  jmp label %IF_2_ExitBB
%IF_2_FalseBB:
  let %32 = load %i
  let %33 = offset i32, %arr, [%32, 10]
  let %34 = load %33
  let %35 = load %key
  let %36 = gt %34, %35
  br %36, label %IF_3_TrueBB, label %IF_3_FalseBB
%IF_2_ExitBB:
  jmp label %While_2_EntryBB
%While_2_BodyBB:
  let %39 = load %left
  let %40 = load %right
  let %41 = add %39, %40
  let %42 = div %41, 2
  let %43 = store %42, %i
  let %44 = load %i
  let %45 = offset i32, %arr, [%44, 10]
  let %46 = load %45
  let %47 = load %key
  let %48 = eq %46, %47
  br %48, label %IF_2_TrueBB, label %IF_2_FalseBB
%While_2_ExitBB:
  let %50 = store 0, %ret
  jmp label %FuncRet
%While_1_ExitBB:
  let %52 = call @getint
  let %53 = store %52, %key
  let %54 = store 0, %left
  let %55 = load %num
  let %56 = sub %55, 1
  let %57 = store %56, %right
  jmp label %While_2_EntryBB
%IF_1_ExitBB:
  let %59 = store 0, %i
  jmp label %While_1_EntryBB
%FuncBody:
  let %61 = call @getint
  let %62 = store %61, %num
  let %63 = load %num
  let %64 = gt %63, 10
  br %64, label %IF_1_TrueBB, label %IF_1_ExitBB
%FuncRet:
  let %66 = load %ret
  ret %66
}
