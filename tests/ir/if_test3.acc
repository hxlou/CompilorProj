fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  let %c = alloca i32, 1
  jmp label %FuncBody
%IF_1_TrueBB:
  let %1 = store 3, %a
  jmp label %IF_1_ExitBB
%IF_2_TrueBB:
  let %3 = store 4, %b
  jmp label %IF_2_ExitBB
%IF_2_ExitBB:
  let %5 = load %a
  let %6 = load %b
  let %7 = add %5, %6
  let %8 = load %c
  let %9 = add %7, %8
  let %10 = call @putint, %9
  let %11 = store 0, %ret
  jmp label %FuncRet
%IF_1_ExitBB:
  let %13 = load %c
  let %14 = sub 0, %13
  br %14, label %IF_2_TrueBB, label %IF_2_ExitBB
%FuncBody:
  let %16 = store 2, %b
  let %17 = sub 0, 1
  let %18 = store %17, %c
  let %19 = store 1, %a
  let %20 = load %a
  let %21 = load %b
  let %22 = add %20, %21
  br %22, label %IF_1_TrueBB, label %IF_1_ExitBB
%FuncRet:
  let %24 = load %ret
  ret %24
}
