fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %n = alloca i32, 1
  let %arr = alloca i32, 5
  let %tmp = alloca i32, 5
  let %i = alloca i32, 1
  let %intv = alloca i32, 1
  let %s1 = alloca i32, 1
  let %e1 = alloca i32, 1
  let %cur1 = alloca i32, 1
  let %s2 = alloca i32, 1
  let %e2 = alloca i32, 1
  let %cur2 = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %i
  let %2 = load %n
  let %3 = lt %1, %2
  br %3, label %While_1_BodyBB, label %While_1_ExitBB
%While_1_BodyBB:
  let %5 = call @getint
  let %6 = load %i
  let %7 = offset i32, %arr, [%6, 5]
  let %8 = store %5, %7
  let %9 = load %i
  let %10 = add %9, 1
  let %11 = store %10, %i
  jmp label %While_1_EntryBB
%While_2_EntryBB:
  let %13 = load %intv
  let %14 = load %n
  let %15 = lt %13, %14
  br %15, label %While_2_BodyBB, label %While_2_ExitBB
%While_3_EntryBB:
  let %17 = load %i
  let %18 = load %n
  let %19 = load %intv
  let %20 = mul 2, %19
  let %21 = sub %18, %20
  let %22 = le %17, %21
  br %22, label %While_3_BodyBB, label %While_3_ExitBB
%While_4_EntryBB:
  let %24 = load %cur1
  let %25 = load %e1
  let %26 = lt %24, %25
  let %27 = load %cur2
  let %28 = load %e2
  let %29 = lt %27, %28
  let %30 = and %26, %29
  br %30, label %While_4_BodyBB, label %While_4_ExitBB
%IF_1_TrueBB:
  let %32 = load %cur1
  let %33 = offset i32, %arr, [%32, 5]
  let %34 = load %33
  let %35 = load %i
  let %36 = offset i32, %tmp, [%35, 5]
  let %37 = store %34, %36
  let %38 = load %cur1
  let %39 = add %38, 1
  let %40 = store %39, %cur1
  jmp label %IF_1_ExitBB
%IF_1_FalseBB:
  let %42 = load %cur2
  let %43 = offset i32, %arr, [%42, 5]
  let %44 = load %43
  let %45 = load %i
  let %46 = offset i32, %tmp, [%45, 5]
  let %47 = store %44, %46
  let %48 = load %cur2
  let %49 = add %48, 1
  let %50 = store %49, %cur2
  jmp label %IF_1_ExitBB
%IF_1_ExitBB:
  let %52 = load %i
  let %53 = add %52, 1
  let %54 = store %53, %i
  jmp label %While_4_EntryBB
%While_4_BodyBB:
  let %56 = load %cur1
  let %57 = offset i32, %arr, [%56, 5]
  let %58 = load %57
  let %59 = load %cur2
  let %60 = offset i32, %arr, [%59, 5]
  let %61 = load %60
  let %62 = lt %58, %61
  br %62, label %IF_1_TrueBB, label %IF_1_FalseBB
%While_5_EntryBB:
  let %64 = load %cur1
  let %65 = load %e1
  let %66 = lt %64, %65
  br %66, label %While_5_BodyBB, label %While_5_ExitBB
%While_5_BodyBB:
  let %68 = load %cur1
  let %69 = offset i32, %arr, [%68, 5]
  let %70 = load %69
  let %71 = load %i
  let %72 = offset i32, %tmp, [%71, 5]
  let %73 = store %70, %72
  let %74 = load %cur1
  let %75 = add %74, 1
  let %76 = store %75, %cur1
  let %77 = load %i
  let %78 = add %77, 1
  let %79 = store %78, %i
  jmp label %While_5_EntryBB
%While_6_EntryBB:
  let %81 = load %cur2
  let %82 = load %e2
  let %83 = lt %81, %82
  br %83, label %While_6_BodyBB, label %While_6_ExitBB
%While_6_BodyBB:
  let %85 = load %cur2
  let %86 = offset i32, %arr, [%85, 5]
  let %87 = load %86
  let %88 = load %i
  let %89 = offset i32, %tmp, [%88, 5]
  let %90 = store %87, %89
  let %91 = load %cur2
  let %92 = add %91, 1
  let %93 = store %92, %cur2
  let %94 = load %i
  let %95 = add %94, 1
  let %96 = store %95, %i
  jmp label %While_6_EntryBB
%While_6_ExitBB:
  jmp label %While_3_EntryBB
%While_5_ExitBB:
  jmp label %While_6_EntryBB
%While_4_ExitBB:
  jmp label %While_5_EntryBB
%While_3_BodyBB:
  let %101 = load %i
  let %102 = store %101, %s1
  let %103 = load %s1
  let %104 = load %intv
  let %105 = add %103, %104
  let %106 = store %105, %e1
  let %107 = load %s1
  let %108 = store %107, %cur1
  let %109 = load %e1
  let %110 = store %109, %s2
  let %111 = load %s2
  let %112 = load %intv
  let %113 = add %111, %112
  let %114 = store %113, %e2
  let %115 = load %s2
  let %116 = store %115, %cur2
  jmp label %While_4_EntryBB
%While_7_EntryBB:
  let %118 = load %cur1
  let %119 = load %e1
  let %120 = lt %118, %119
  let %121 = load %cur2
  let %122 = load %e2
  let %123 = lt %121, %122
  let %124 = and %120, %123
  br %124, label %While_7_BodyBB, label %While_7_ExitBB
%IF_3_TrueBB:
  let %126 = load %cur1
  let %127 = offset i32, %arr, [%126, 5]
  let %128 = load %127
  let %129 = load %i
  let %130 = offset i32, %tmp, [%129, 5]
  let %131 = store %128, %130
  let %132 = load %cur1
  let %133 = add %132, 1
  let %134 = store %133, %cur1
  let %135 = load %i
  let %136 = add %135, 1
  let %137 = store %136, %i
  jmp label %IF_3_ExitBB
%IF_3_FalseBB:
  let %139 = load %cur2
  let %140 = offset i32, %arr, [%139, 5]
  let %141 = load %140
  let %142 = load %i
  let %143 = offset i32, %tmp, [%142, 5]
  let %144 = store %141, %143
  let %145 = load %cur2
  let %146 = add %145, 1
  let %147 = store %146, %cur2
  let %148 = load %i
  let %149 = add %148, 1
  let %150 = store %149, %i
  jmp label %IF_3_ExitBB
%IF_3_ExitBB:
  jmp label %While_7_EntryBB
%While_7_BodyBB:
  let %153 = load %cur1
  let %154 = offset i32, %arr, [%153, 5]
  let %155 = load %154
  let %156 = load %cur2
  let %157 = offset i32, %arr, [%156, 5]
  let %158 = load %157
  let %159 = lt %155, %158
  br %159, label %IF_3_TrueBB, label %IF_3_FalseBB
%While_8_EntryBB:
  let %161 = load %cur1
  let %162 = load %e1
  let %163 = lt %161, %162
  br %163, label %While_8_BodyBB, label %While_8_ExitBB
%While_8_BodyBB:
  let %165 = load %cur1
  let %166 = offset i32, %arr, [%165, 5]
  let %167 = load %166
  let %168 = load %i
  let %169 = offset i32, %tmp, [%168, 5]
  let %170 = store %167, %169
  let %171 = load %cur1
  let %172 = add %171, 1
  let %173 = store %172, %cur1
  let %174 = load %i
  let %175 = add %174, 1
  let %176 = store %175, %i
  jmp label %While_8_EntryBB
%While_9_EntryBB:
  let %178 = load %cur2
  let %179 = load %e2
  let %180 = lt %178, %179
  br %180, label %While_9_BodyBB, label %While_9_ExitBB
%While_9_BodyBB:
  let %182 = load %cur2
  let %183 = offset i32, %arr, [%182, 5]
  let %184 = load %183
  let %185 = load %i
  let %186 = offset i32, %tmp, [%185, 5]
  let %187 = store %184, %186
  let %188 = load %cur2
  let %189 = add %188, 1
  let %190 = store %189, %cur2
  let %191 = load %i
  let %192 = add %191, 1
  let %193 = store %192, %i
  jmp label %While_9_EntryBB
%While_9_ExitBB:
  jmp label %IF_2_ExitBB
%While_8_ExitBB:
  jmp label %While_9_EntryBB
%While_7_ExitBB:
  jmp label %While_8_EntryBB
%IF_2_TrueBB:
  let %198 = load %i
  let %199 = store %198, %s1
  let %200 = load %s1
  let %201 = load %intv
  let %202 = add %200, %201
  let %203 = store %202, %e1
  let %204 = load %s1
  let %205 = store %204, %cur1
  let %206 = load %e1
  let %207 = store %206, %s2
  let %208 = load %n
  let %209 = store %208, %e2
  let %210 = load %s2
  let %211 = store %210, %cur2
  jmp label %While_7_EntryBB
%While_10_EntryBB:
  let %213 = load %i
  let %214 = load %n
  let %215 = lt %213, %214
  br %215, label %While_10_BodyBB, label %While_10_ExitBB
%While_10_BodyBB:
  let %217 = load %i
  let %218 = offset i32, %arr, [%217, 5]
  let %219 = load %218
  let %220 = load %i
  let %221 = offset i32, %tmp, [%220, 5]
  let %222 = store %219, %221
  let %223 = load %i
  let %224 = add %223, 1
  let %225 = store %224, %i
  jmp label %While_10_EntryBB
%While_10_ExitBB:
  jmp label %IF_2_ExitBB
%IF_2_FalseBB:
  jmp label %While_10_EntryBB
%While_11_EntryBB:
  let %229 = load %i
  let %230 = load %n
  let %231 = lt %229, %230
  br %231, label %While_11_BodyBB, label %While_11_ExitBB
%While_11_BodyBB:
  let %233 = load %i
  let %234 = offset i32, %tmp, [%233, 5]
  let %235 = load %234
  let %236 = load %i
  let %237 = offset i32, %arr, [%236, 5]
  let %238 = store %235, %237
  let %239 = load %i
  let %240 = add %239, 1
  let %241 = store %240, %i
  jmp label %While_11_EntryBB
%While_11_ExitBB:
  let %243 = load %intv
  let %244 = mul %243, 2
  let %245 = store %244, %intv
  jmp label %While_2_EntryBB
%IF_2_ExitBB:
  let %247 = store 0, %i
  jmp label %While_11_EntryBB
%While_3_ExitBB:
  let %249 = load %i
  let %250 = load %intv
  let %251 = add %249, %250
  let %252 = load %n
  let %253 = lt %251, %252
  br %253, label %IF_2_TrueBB, label %IF_2_FalseBB
%While_2_BodyBB:
  let %255 = store 0, %i
  jmp label %While_3_EntryBB
%While_12_EntryBB:
  let %257 = load %i
  let %258 = load %n
  let %259 = lt %257, %258
  br %259, label %While_12_BodyBB, label %While_12_ExitBB
%While_12_BodyBB:
  let %261 = load %i
  let %262 = offset i32, %arr, [%261, 5]
  let %263 = load %262
  let %264 = call @putint, %263
  let %265 = call @putch, 32
  let %266 = load %i
  let %267 = add %266, 1
  let %268 = store %267, %i
  jmp label %While_12_EntryBB
%While_12_ExitBB:
  let %270 = store 0, %ret
  jmp label %FuncRet
%While_2_ExitBB:
  let %272 = store 0, %i
  jmp label %While_12_EntryBB
%While_1_ExitBB:
  let %274 = store 1, %intv
  jmp label %While_2_EntryBB
%FuncBody:
  let %276 = store 5, %n
  let %277 = store 0, %i
  jmp label %While_1_EntryBB
%FuncRet:
  let %279 = load %ret
  ret %279
}
