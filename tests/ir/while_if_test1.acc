fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @whileIf( ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %a
  let %2 = lt %1, 100
  br %2, label %While_1_BodyBB, label %While_1_ExitBB
%IF_1_TrueBB:
  let %4 = store 25, %b
  jmp label %IF_1_ExitBB
%IF_2_TrueBB:
  let %6 = store 42, %b
  jmp label %IF_2_ExitBB
%IF_2_FalseBB:
  let %8 = load %a
  let %9 = mul %8, 2
  let %10 = store %9, %b
  jmp label %IF_2_ExitBB
%IF_2_ExitBB:
  jmp label %IF_1_ExitBB
%IF_1_FalseBB:
  let %13 = load %a
  let %14 = eq %13, 10
  br %14, label %IF_2_TrueBB, label %IF_2_FalseBB
%IF_1_ExitBB:
  let %16 = load %a
  let %17 = add %16, 1
  let %18 = store %17, %a
  jmp label %While_1_EntryBB
%While_1_BodyBB:
  let %20 = load %a
  let %21 = eq %20, 5
  br %21, label %IF_1_TrueBB, label %IF_1_FalseBB
%While_1_ExitBB:
  let %23 = load %b
  let %24 = store %23, %ret
  jmp label %FuncRet
%FuncBody:
  let %26 = store 0, %a
  let %27 = store 0, %b
  jmp label %While_1_EntryBB
%FuncRet:
  let %29 = load %ret
  ret %29
}
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  jmp label %FuncBody
%FuncBody:
  let %1 = call @whileIf
  let %2 = call @putint, %1
  let %3 = store 0, %ret
  jmp label %FuncRet
%FuncRet:
  let %5 = load %ret
  ret %5
}
