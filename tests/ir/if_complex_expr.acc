fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  let %c = alloca i32, 1
  let %d = alloca i32, 1
  let %result = alloca i32, 1
  jmp label %FuncBody
%IF_1_TrueBB:
  let %1 = load %result
  let %2 = call @putint, %1
  jmp label %IF_1_ExitBB
%IF_2_TrueBB:
  let %4 = store 4, %result
  let %5 = load %result
  let %6 = call @putint, %5
  jmp label %IF_2_ExitBB
%IF_2_ExitBB:
  let %8 = store 0, %ret
  jmp label %FuncRet
%IF_1_ExitBB:
  let %10 = load %d
  let %11 = rem %10, 2
  let %12 = add %11, 67
  let %13 = lt %12, 0
  let %14 = load %a
  let %15 = load %b
  let %16 = sub %14, %15
  let %17 = ne %16, 0
  let %18 = load %c
  let %19 = add %18, 2
  let %20 = rem %19, 2
  let %21 = ne %20, 0
  let %22 = and %17, %21
  let %23 = or %13, %22
  br %23, label %IF_2_TrueBB, label %IF_2_ExitBB
%FuncBody:
  let %25 = store 5, %a
  let %26 = store 5, %b
  let %27 = store 1, %c
  let %28 = sub 0, 2
  let %29 = store %28, %d
  let %30 = store 2, %result
  let %31 = load %d
  let %32 = mul %31, 1
  let %33 = div %32, 2
  let %34 = lt %33, 0
  let %35 = load %a
  let %36 = load %b
  let %37 = sub %35, %36
  let %38 = ne %37, 0
  let %39 = load %c
  let %40 = add %39, 3
  let %41 = rem %40, 2
  let %42 = ne %41, 0
  let %43 = and %38, %42
  let %44 = or %34, %43
  br %44, label %IF_1_TrueBB, label %IF_1_ExitBB
%FuncRet:
  let %46 = load %ret
  ret %46
}
