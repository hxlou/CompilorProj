fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %flag = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  let %c = alloca i32, 1
  let %d = alloca i32, 1
  let %e = alloca i32, 1
  jmp label %FuncBody
%IF_1_TrueBB:
  let %1 = store 1, %flag
  jmp label %IF_1_ExitBB
%IF_1_ExitBB:
  let %3 = load %flag
  let %4 = call @putint, %3
  let %5 = store 0, %ret
  jmp label %FuncRet
%FuncBody:
  let %7 = store 0, %flag
  let %8 = store 1, %a
  let %9 = store 0, %b
  let %10 = store 1, %c
  let %11 = store 2, %d
  let %12 = store 4, %e
  let %13 = load %a
  let %14 = load %b
  let %15 = mul %13, %14
  let %16 = load %c
  let %17 = div %15, %16
  let %18 = load %e
  let %19 = load %d
  let %20 = add %18, %19
  let %21 = eq %17, %20
  let %22 = load %a
  let %23 = load %a
  let %24 = load %b
  let %25 = add %23, %24
  let %26 = mul %22, %25
  let %27 = load %c
  let %28 = add %26, %27
  let %29 = load %d
  let %30 = load %e
  let %31 = add %29, %30
  let %32 = le %28, %31
  let %33 = and %21, %32
  let %34 = load %a
  let %35 = load %b
  let %36 = load %c
  let %37 = mul %35, %36
  let %38 = sub %34, %37
  let %39 = load %d
  let %40 = load %a
  let %41 = load %c
  let %42 = div %40, %41
  let %43 = sub %39, %42
  let %44 = eq %38, %43
  let %45 = or %33, %44
  br %45, label %IF_1_TrueBB, label %IF_1_ExitBB
%FuncRet:
  let %47 = load %ret
  ret %47
}
