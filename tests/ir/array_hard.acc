fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @initW(#0: i32* ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  jmp label %FuncBody
%FuncBody:
  let %2 = offset i32, #0, [0, none]
  let %3 = store 0, %2
  let %4 = offset i32, #0, [1, none]
  let %5 = store 1, %4
  let %6 = offset i32, #0, [2, none]
  let %7 = store 2, %6
  let %8 = offset i32, #0, [3, none]
  let %9 = store 5, %8
  let %10 = offset i32, #0, [4, none]
  let %11 = store 6, %10
  let %12 = offset i32, #0, [5, none]
  let %13 = store 7, %12
  let %14 = store 0, %ret
  jmp label %FuncRet
%FuncRet:
  let %16 = load %ret
  ret %16
}
fn @initV(#0: i32* ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  jmp label %FuncBody
%FuncBody:
  let %2 = offset i32, #0, [0, none]
  let %3 = store 0, %2
  let %4 = offset i32, #0, [1, none]
  let %5 = store 1, %4
  let %6 = offset i32, #0, [2, none]
  let %7 = store 6, %6
  let %8 = offset i32, #0, [3, none]
  let %9 = store 18, %8
  let %10 = offset i32, #0, [4, none]
  let %11 = store 22, %10
  let %12 = offset i32, #0, [5, none]
  let %13 = store 28, %12
  let %14 = store 0, %ret
  jmp label %FuncRet
%FuncRet:
  let %16 = load %ret
  ret %16
}
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %weight = alloca i32, 6
  let %value = alloca i32, 6
  let %results = alloca i32, 72
  let %r_i = alloca i32, 1
  let %r_j = alloca i32, 1
  let %ki = alloca i32, 1
  let %kj = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %r_i
  let %2 = lt %1, 6
  br %2, label %While_1_BodyBB, label %While_1_ExitBB
%While_2_EntryBB:
  let %4 = load %r_j
  let %5 = lt %4, 12
  br %5, label %While_2_BodyBB, label %While_2_ExitBB
%While_2_BodyBB:
  let %7 = load %r_i
  let %8 = load %r_j
  let %9 = offset i32, %results, [%7, 6], [%8, 12]
  let %10 = store 0, %9
  let %11 = load %r_j
  let %12 = add %11, 1
  let %13 = store %12, %r_j
  jmp label %While_2_EntryBB
%While_2_ExitBB:
  let %15 = load %r_i
  let %16 = add %15, 1
  let %17 = store %16, %r_i
  jmp label %While_1_EntryBB
%While_1_BodyBB:
  let %19 = store 0, %r_j
  jmp label %While_2_EntryBB
%While_3_EntryBB:
  let %21 = load %ki
  let %22 = lt %21, 6
  br %22, label %While_3_BodyBB, label %While_3_ExitBB
%While_4_EntryBB:
  let %24 = load %kj
  let %25 = lt %24, 12
  br %25, label %While_4_BodyBB, label %While_4_ExitBB
%IF_1_TrueBB:
  let %27 = load %ki
  let %28 = sub %27, 1
  let %29 = load %kj
  let %30 = offset i32, %results, [%28, 6], [%29, 12]
  let %31 = load %30
  let %32 = load %ki
  let %33 = load %kj
  let %34 = offset i32, %results, [%32, 6], [%33, 12]
  let %35 = store %31, %34
  jmp label %IF_1_ExitBB
%IF_2_TrueBB:
  let %37 = load %ki
  let %38 = sub %37, 1
  let %39 = load %kj
  let %40 = offset i32, %results, [%38, 6], [%39, 12]
  let %41 = load %40
  let %42 = load %ki
  let %43 = load %kj
  let %44 = offset i32, %results, [%42, 6], [%43, 12]
  let %45 = store %41, %44
  jmp label %IF_2_ExitBB
%IF_2_FalseBB:
  let %47 = load %ki
  let %48 = offset i32, %value, [%47, 6]
  let %49 = load %48
  let %50 = load %ki
  let %51 = sub %50, 1
  let %52 = load %kj
  let %53 = load %ki
  let %54 = offset i32, %weight, [%53, 6]
  let %55 = load %54
  let %56 = sub %52, %55
  let %57 = offset i32, %results, [%51, 6], [%56, 12]
  let %58 = load %57
  let %59 = add %49, %58
  let %60 = load %ki
  let %61 = load %kj
  let %62 = offset i32, %results, [%60, 6], [%61, 12]
  let %63 = store %59, %62
  jmp label %IF_2_ExitBB
%IF_2_ExitBB:
  jmp label %IF_1_ExitBB
%IF_1_FalseBB:
  let %66 = load %ki
  let %67 = sub %66, 1
  let %68 = load %kj
  let %69 = offset i32, %results, [%67, 6], [%68, 12]
  let %70 = load %69
  let %71 = load %ki
  let %72 = offset i32, %value, [%71, 6]
  let %73 = load %72
  let %74 = load %ki
  let %75 = sub %74, 1
  let %76 = load %kj
  let %77 = load %ki
  let %78 = offset i32, %weight, [%77, 6]
  let %79 = load %78
  let %80 = sub %76, %79
  let %81 = offset i32, %results, [%75, 6], [%80, 12]
  let %82 = load %81
  let %83 = add %73, %82
  let %84 = gt %70, %83
  br %84, label %IF_2_TrueBB, label %IF_2_FalseBB
%IF_1_ExitBB:
  let %86 = load %kj
  let %87 = add %86, 1
  let %88 = store %87, %kj
  jmp label %While_4_EntryBB
%While_4_BodyBB:
  let %90 = load %kj
  let %91 = load %ki
  let %92 = offset i32, %weight, [%91, 6]
  let %93 = load %92
  let %94 = lt %90, %93
  br %94, label %IF_1_TrueBB, label %IF_1_FalseBB
%While_4_ExitBB:
  let %96 = load %ki
  let %97 = add %96, 1
  let %98 = store %97, %ki
  jmp label %While_3_EntryBB
%While_3_BodyBB:
  let %100 = store 1, %kj
  jmp label %While_4_EntryBB
%While_3_ExitBB:
  let %102 = offset i32, %results, [5, 6], [11, 12]
  let %103 = load %102
  let %104 = call @putint, %103
  let %105 = store 0, %ret
  jmp label %FuncRet
%While_1_ExitBB:
  let %107 = store 1, %ki
  jmp label %While_3_EntryBB
%FuncBody:
  let %109 = load %weight
  let %110 = call @initW, %109
  let %111 = load %value
  let %112 = call @initV, %111
  let %113 = store 0, %r_i
  jmp label %While_1_EntryBB
%FuncRet:
  let %115 = load %ret
  ret %115
}
