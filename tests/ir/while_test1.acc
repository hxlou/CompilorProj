fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @doubleWhile( ) -> i32 {
%FuncEntry:
  let %ret = alloca i32, 1
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %i
  let %2 = lt %1, 100
  br %2, label %While_1_BodyBB, label %While_1_ExitBB
%While_2_EntryBB:
  let %4 = load %j
  let %5 = lt %4, 100
  br %5, label %While_2_BodyBB, label %While_2_ExitBB
%While_2_BodyBB:
  let %7 = load %j
  let %8 = add %7, 6
  let %9 = store %8, %j
  jmp label %While_2_EntryBB
%While_2_ExitBB:
  let %11 = load %j
  let %12 = sub %11, 100
  let %13 = store %12, %j
  jmp label %While_1_EntryBB
%While_1_BodyBB:
  let %15 = load %i
  let %16 = add %15, 30
  let %17 = store %16, %i
  jmp label %While_2_EntryBB
%While_1_ExitBB:
  let %19 = load %j
  let %20 = store %19, %ret
  jmp label %FuncRet
%FuncBody:
  let %22 = store 5, %i
  let %23 = store 7, %j
  jmp label %While_1_EntryBB
%FuncRet:
  let %25 = load %ret
  ret %25
}
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  jmp label %FuncBody
%FuncBody:
  let %1 = call @doubleWhile
  let %2 = call @putint, %1
  let %3 = store 0, %ret
  jmp label %FuncRet
%FuncRet:
  let %5 = load %ret
  ret %5
}
