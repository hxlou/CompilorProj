fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%GlobalBind:
%FuncEntry:
  let %ret = alloca i32, 1
  let %k = alloca i32, 1
  let %n = alloca i32, 1
  let %i = alloca i32, 1
  jmp label %FuncBody
%While_1_EntryBB:
  let %1 = load %i
  let %2 = load %n
  let %3 = sub %2, 1
  let %4 = le %1, %3
  br %4, label %While_1_BodyBB, label %While_1_ExitBB
%While_1_BodyBB:
  let %6 = load %i
  let %7 = add %6, 1
  let %8 = store %7, %i
  let %9 = load %k
  let %10 = add %9, 1
  let %11 = load %k
  let %12 = load %k
  let %13 = add %11, %12
  let %14 = store %13, %k
  jmp label %While_1_EntryBB
%While_1_ExitBB:
  let %16 = load %k
  let %17 = call @putint, %16
  let %18 = store 0, %ret
  jmp label %FuncRet
%FuncBody:
  let %20 = store 10, %n
  let %21 = store 0, %i
  let %22 = store 1, %k
  jmp label %While_1_EntryBB
%FuncRet:
  let %24 = load %ret
  ret %24
}
